import { ApiProperty } from '@nestjs/swagger';
import { Expose } from 'class-transformer';
import { IsNotEmpty, IsOptional, IsString, MaxLength } from 'class-validator';

// const productWithParameters = Prisma.validator<Prisma.productsArgs>()({
//   include: {
//     price: new Prisma.Decimal(price)
//   }
// });

// type ProductWithParameters = Prisma.productsGetPayload<
//   typeof productWithParameters
// >;

export class ProductDto {
  /**
   * The internal autogenerated id
   * @example 1
   */
  @Expose()
  @ApiProperty({
    description: 'The internal autogenerated id of the product'
  })
  productId: number;

  @IsString()
  @IsNotEmpty()
  @Expose()
  @MaxLength(8)
  @ApiProperty({
    example: 'UREN',
    description: 'The product code'
  })
  code: string;

  @IsString()
  @IsNotEmpty()
  @Expose()
  @MaxLength(148)
  @ApiProperty({
    example: 'Cleaning Service',
    description: 'The product name'
  })
  name: string;

  @IsString()
  @IsNotEmpty()
  @Expose()
  @MaxLength(224)
  @IsOptional()
  @ApiProperty({
    example: 'Cleaning Service',
    description: 'The product name'
  })
  description?: string;

  @Expose()
  @ApiProperty({
    example: '12.5',
    description: 'The product name'
  })
  price: number;

  // // @IsString()
  // @Expose()
  // @ApiProperty({
  //   example: '12.5',
  //   description: 'The product name'
  // })
  // get priceDecimal() {
  //   return this.price.toNumber();
  // }

  @Expose()
  @ApiProperty({
    description: 'The creation date of the product'
  })
  createdAt: Date;

  @Expose()
  @ApiProperty({
    description: 'The user who created the product'
  })
  createdBy: string;

  @Expose()
  @ApiProperty({
    description: 'The last update date of the product'
  })
  updatedAt: Date;

  @Expose()
  @ApiProperty({
    description: 'The user who updated the product'
  })
  updatedBy: string;
}
