import { ApiHideProperty, ApiProperty } from '@nestjs/swagger';
import { documentTypes, Prisma, titles } from '@prisma/client';
import { Exclude, Expose, Type } from 'class-transformer';
import { IsNotEmpty, IsOptional, IsString, MaxLength } from 'class-validator';
import { AddressDto } from 'src/addresses/dto/address.dto';
import { PhoneDto } from 'src/phones/dto/phone.dto';

const customerWithParameters = Prisma.validator<Prisma.customersArgs>()({
  include: {
    documentType: true, // { select: { name: true } },
    title: true,
    addresses: true,
    phones: true
  }
});

type CustomerWithParameters = Prisma.customersGetPayload<
  typeof customerWithParameters
>;
export class CustomerDto implements CustomerWithParameters {
  /**
   * The internal autogenerated id
   * @example 1
   */
  @Expose()
  @ApiProperty({
    description: 'The internal autogenerated id of the customer'
  })
  customerId: number;

  @IsString()
  @IsNotEmpty()
  @IsOptional()
  @Expose()
  @MaxLength(10)
  @ApiProperty({
    example: 'LC',
    description: 'Initials the customer'
  })
  initials: string;

  @IsString()
  @IsNotEmpty()
  @Expose()
  @MaxLength(50)
  @ApiProperty({
    example: 'Lucio',
    description: 'The first name of the customer'
  })
  firstName: string;

  @IsString()
  @Expose()
  @MaxLength(50)
  @ApiProperty({
    example: 'Cabrera',
    description: 'The last name of the customer'
  })
  lastName: string = '';

  @Exclude()
  @ApiHideProperty()
  documentTypeId: number;

  @Exclude({ toPlainOnly: true })
  @ApiHideProperty()
  documentType: documentTypes;

  @IsString()
  @Expose()
  @ApiProperty({
    example: 'Passport',
    description: 'Document type name'
  })
  get documentTypeName() {
    return this.documentType?.name ?? '';
  }

  @Exclude()
  @ApiHideProperty()
  titleId: number;

  @Exclude({ toPlainOnly: true })
  @ApiHideProperty()
  title: titles;

  @IsString()
  @Expose()
  @ApiProperty({
    example: 'Sr',
    description: 'Title name'
  })
  get titleName() {
    return this.title?.name ?? '';
  }

  @Expose()
  @ApiProperty({
    description: 'Addresses of the customer',
    type: AddressDto
  })
  @Type(() => AddressDto)
  @Expose()
  addresses: AddressDto[];

  @Expose()
  get currentAddress() {
    return this.addresses?.[0];
  }

  @Expose()
  @ApiProperty({
    description: 'Phone numbers of the customer',
    type: PhoneDto
  })
  @Type(() => PhoneDto)
  @Expose()
  phones: PhoneDto[];

  @Expose()
  get defaultPhone() {
    return this.phones?.[0];
  }

  @IsString()
  @IsNotEmpty()
  @Expose()
  @MaxLength(24)
  @ApiProperty({
    example: '13859',
    description: 'The document Id'
  })
  documentId: string;

  @Expose()
  @ApiProperty({
    description: 'The creation date of the customer'
  })
  createdAt: Date;

  @Expose()
  @ApiProperty({
    description: 'The user who created the customer'
  })
  createdBy: string;

  @Expose()
  @ApiProperty({
    description: 'The last update date of the customer'
  })
  updatedAt: Date;

  @Expose()
  @ApiProperty({
    description: 'The user who updated the customer'
  })
  updatedBy: string;
}
